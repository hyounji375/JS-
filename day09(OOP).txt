OOP(Object Oriented Programming)

    - TS(Type script)에서 빛을 발한다.
    - 프로그래밍의 한 종류
    - 객체들을 콘셉트로 프로그래밍 하는 방식
        -> 객체란 관련된 데이터와 함수 등을 묶는 것
    - OOP로 구현하게 되면 다른 언어들의 이해도가 상승함.

---------------------------------------------------------------------------------

* 절차 지향 프로그래밍

main() -> 함수1 -> 함수1, 2, 3 -> data
       -> 함수2 -> ...

       만들어진 함수를 절차에 따라 순서대로 실행하는 프로그래밍 방법

* 객체 지향 프로그래밍

객체에 data(변수), data, function(함수, 메소드)가 있다.

main - 객체 -> 데이터와 실행하고자 하는 함수

절차대로 진행하지 않아도 내가 필요로 할 때 객체를 불러와서 내가 쓰고 싶은 데이터와 함수를 쓸 수 있는 게 객체 지향.

절차 지향은 한 군데에서 에러가 나면 다른 것들도 다 수정을 해야 하는 일이 발생.
하지만 객체 지향은 문제가 생기면 관련된 객체만 수정해도 되고 어떠한 객체가 여러 번 사용되는 곳이 있다면 재사용 하기에도 용이함.
만약 새로운 기능이 필요하다고 하면 새로운 객체만 만들면 끝.

---------------------------------------------------------------------------------

Class 자체에는 데이터가 들어 있지 않다.
그러나 해당 Class로 생성되는 객체가 어떤 구조로 되어 있는지 정의할 수 있는 일종의 템플릿(틀).
붕어빵 Class(틀)를 활용해서 팥(데이터)붕어빵 객체를 만들었다.

---------------------------------------------------------------------------------
객체 지향의 원칙

1. 캡슐화가 잘 되어 있어야 한다.
2. 추상성이 좋아야 한다.
3. 상속을 통해 코드의 재사용성을 높여야 한다.
4. 위 세 가지를 통해 다양한 형태로 변할 수 있는 다형성을 높여야 한다.

    캡슐화 : 서로 관련 있는 정보들을 한 캡슐에 모으는 것.
             외부에 보일 필요가 없는 데이터는 숨겨놓는다(보안).
             어떤 데이터를 묶고 어떤 데이터를 안 보여줄 것인지가 OOP의 핵심.
            
             public : 공개. 외부에서 접근이 가능
             private : 비공개. 외부에서 접근 불가능
             protected : 비공개. 단 나와 관련된 애들은 접근 가능

---------------------------------------------------------------------------------

게터, 세터

get : 데이터를 가지고 오고
set : 데이터를 세팅한다

---------------------------------------------------------------------------------

상속

ex) 자판기 class를 상속 받은(업그레이드 된) 새로운 자판기 class. 

상속을 받은 자식 class는 부모 class의 모든 기능을 사용할 수 있다.

parent - child
super - sub
base - derived의 관계라고도 많이 한다.

